#!/usr/bin/env python3
"""
Script para probar el arreglo del webhook de Telegram
"""
import asyncio
import os
import sys
from pathlib import Path

# A√±adir el directorio ra√≠z al path
sys.path.insert(0, str(Path(__file__).parent))

async def test_webhook_initialization():
    """Probar la inicializaci√≥n del webhook"""
    print("üîß Probando inicializaci√≥n del webhook...")
    
    # Verificar variables de entorno
    telegram_token = os.getenv("TELEGRAM_TOKEN")
    if not telegram_token:
        print("‚ùå TELEGRAM_TOKEN no configurado")
        return False
    
    print(f"‚úÖ TELEGRAM_TOKEN configurado: ...{telegram_token[-4:]}")
    
    try:
        # Importar y probar inicializaci√≥n
        from app.webhook_bot import ensure_telegram_app_initialized
        
        print("üì± Inicializando aplicaci√≥n de Telegram...")
        app = await ensure_telegram_app_initialized()
        
        if not app:
            print("‚ùå No se pudo inicializar la aplicaci√≥n")
            return False
        
        print("‚úÖ Aplicaci√≥n inicializada correctamente")
        
        # Probar obtener informaci√≥n del bot
        print("ü§ñ Obteniendo informaci√≥n del bot...")
        bot_info = await app.bot.get_me()
        print(f"‚úÖ Bot: @{bot_info.username} ({bot_info.first_name})")
        
        # Probar obtener informaci√≥n del webhook
        print("üîó Verificando estado del webhook...")
        webhook_info = await app.bot.get_webhook_info()
        print(f"üìç Webhook URL: {webhook_info.url or 'No configurado'}")
        print(f"üìä Updates pendientes: {webhook_info.pending_update_count}")
        
        if webhook_info.last_error_message:
            print(f"‚ö†Ô∏è √öltimo error: {webhook_info.last_error_message}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error durante la prueba: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        return False

async def test_webhook_setup():
    """Probar configuraci√≥n del webhook"""
    print("\nüîß Probando configuraci√≥n del webhook...")
    
    try:
        from app.webhook_bot import ensure_telegram_app_initialized
        
        app = await ensure_telegram_app_initialized()
        if not app:
            print("‚ùå No se pudo inicializar la aplicaci√≥n")
            return False
        
        # URL del webhook (usar localhost para pruebas locales)
        webhook_url = "https://ses-gastos.onrender.com/webhook/telegram"
        print(f"üîó Configurando webhook: {webhook_url}")
        
        # Configurar webhook
        success = await app.bot.set_webhook(url=webhook_url)
        
        if success:
            print("‚úÖ Webhook configurado correctamente")
            
            # Verificar configuraci√≥n
            webhook_info = await app.bot.get_webhook_info()
            print(f"üìç URL configurada: {webhook_info.url}")
            print(f"üìä Updates pendientes: {webhook_info.pending_update_count}")
            
            return True
        else:
            print("‚ùå No se pudo configurar el webhook")
            return False
            
    except Exception as e:
        print(f"‚ùå Error configurando webhook: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        return False

async def main():
    """Funci√≥n principal"""
    print("üöÄ Iniciando pruebas del webhook de Telegram...\n")
    
    # Prueba 1: Inicializaci√≥n
    init_success = await test_webhook_initialization()
    
    if init_success:
        # Prueba 2: Configuraci√≥n del webhook
        setup_success = await test_webhook_setup()
        
        if setup_success:
            print("\n‚úÖ ¬°Todas las pruebas pasaron!")
            print("\nüìã Pr√≥ximos pasos:")
            print("1. Despliega los cambios en Render")
            print("2. Ve a /bot/webhook-status para verificar el estado")
            print("3. Prueba el bot enviando /start en Telegram")
            print("4. Si funciona, env√≠a /usar SES01 y luego una foto")
        else:
            print("\n‚ö†Ô∏è La inicializaci√≥n funciona pero hay problemas con el webhook")
    else:
        print("\n‚ùå Hay problemas con la inicializaci√≥n b√°sica")
        print("\nüîß Verifica:")
        print("- TELEGRAM_TOKEN est√° configurado correctamente")
        print("- La conexi√≥n a internet funciona")
        print("- No hay problemas con las dependencias")

if __name__ == "__main__":
    asyncio.run(main())