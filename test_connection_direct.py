#!/usr/bin/env python3
"""
Script de diagn√≥stico para probar conexi√≥n directa a PostgreSQL
Ejecuta esto en Render para ver exactamente qu√© falla
"""
import os
import sys

print("=" * 70)
print("üîç DIAGN√ìSTICO DE CONEXI√ìN POSTGRESQL")
print("=" * 70)

# 1. Verificar que psycopg est√© instalado
print("\n1Ô∏è‚É£ Verificando psycopg...")
try:
    import psycopg
    print(f"   ‚úÖ psycopg instalado: {psycopg.__version__}")
except ImportError as e:
    print(f"   ‚ùå psycopg no instalado: {e}")
    sys.exit(1)

# 2. Obtener DATABASE_URL
print("\n2Ô∏è‚É£ Verificando DATABASE_URL...")
DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    print("   ‚ùå DATABASE_URL no est√° configurada")
    sys.exit(1)

# Enmascarar contrase√±a
import re
masked = re.sub(r"://([^:@]+):([^@]+)@", r"://\1:***@", DATABASE_URL)
print(f"   ‚úÖ DATABASE_URL encontrada")
print(f"   üìã URL: {masked}")

# Extraer partes de la URL
try:
    from urllib.parse import urlparse
    parsed = urlparse(DATABASE_URL)
    print(f"\n   üìä Detalles:")
    print(f"      Usuario: {parsed.username}")
    print(f"      Host: {parsed.hostname}")
    print(f"      Puerto: {parsed.port or 'no especificado'}")
    print(f"      Base de datos: {parsed.path.lstrip('/')}")
    print(f"      Contrase√±a longitud: {len(parsed.password) if parsed.password else 0} caracteres")
except Exception as e:
    print(f"   ‚ö†Ô∏è Error parseando URL: {e}")

# 3. Test de conexi√≥n con psycopg directamente
print("\n3Ô∏è‚É£ Intentando conexi√≥n con psycopg...")
print("   (Esto es lo que hace la aplicaci√≥n internamente)")

try:
    # Intentar con la URL completa
    print(f"\n   üì° Conectando a: {masked}")
    conn = psycopg.connect(DATABASE_URL, connect_timeout=10)
    print("   ‚úÖ CONEXI√ìN EXITOSA!")
    
    # Ejecutar una query de prueba
    cursor = conn.cursor()
    cursor.execute("SELECT version();")
    version = cursor.fetchone()[0]
    print(f"   ‚úÖ Query ejecutada correctamente")
    print(f"   üìä PostgreSQL version: {version.split()[1]}")
    
    cursor.execute("SELECT current_database();")
    db_name = cursor.fetchone()[0]
    print(f"   üìä Base de datos actual: {db_name}")
    
    cursor.execute("SELECT current_user;")
    current_user = cursor.fetchone()[0]
    print(f"   üìä Usuario actual: {current_user}")
    
    cursor.close()
    conn.close()
    
    print("\n" + "=" * 70)
    print("‚úÖ ¬°DIAGN√ìSTICO EXITOSO! La conexi√≥n funciona correctamente.")
    print("=" * 70)
    
except psycopg.OperationalError as e:
    print(f"\n   ‚ùå ERROR DE CONEXI√ìN (OperationalError):")
    print(f"   {str(e)}")
    print("\n   üîç Posibles causas:")
    print("   1. Contrase√±a incorrecta")
    print("   2. Usuario no existe")
    print("   3. Base de datos no accesible")
    print("   4. Credenciales fueron rotadas/cambiadas")
    
    print("\n   üí° Soluci√≥n:")
    print("   Ve a Render Dashboard ‚Üí Databases ‚Üí tu BD")
    print("   Verifica que el usuario y contrase√±a sean correctos")
    print("   Si no est√°s seguro, rota la contrase√±a y actualiza DATABASE_URL")
    sys.exit(1)
    
except Exception as e:
    print(f"\n   ‚ùå ERROR INESPERADO: {type(e).__name__}")
    print(f"   {str(e)}")
    sys.exit(1)

# 4. Test con diferentes variantes de URL
print("\n4Ô∏è‚É£ Probando variantes de URL...")

# Variante 1: Con sslmode
if "sslmode=" not in DATABASE_URL:
    print("\n   üì° Probando con sslmode=require...")
    url_with_ssl = DATABASE_URL
    if "?" in url_with_ssl:
        url_with_ssl += "&sslmode=require"
    else:
        url_with_ssl += "?sslmode=require"
    
    try:
        conn = psycopg.connect(url_with_ssl, connect_timeout=10)
        print("   ‚úÖ Funciona con sslmode=require")
        conn.close()
    except Exception as e:
        print(f"   ‚ùå Falla con sslmode=require: {e}")

print("\n" + "=" * 70)
print("FIN DEL DIAGN√ìSTICO")
print("=" * 70)
